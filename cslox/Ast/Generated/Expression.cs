// Generated by cslox/Ast/generate.py at 28.07.2025 22:38:46
// Do not edit this file manually.

using System;
namespace cslox.Ast.Generated;

// ReSharper disable InconsistentNaming

public abstract class Expression {
    public abstract TResult Accept<TResult>(IExpressionVisitor<TResult> visitor);
}
public interface IExpressionVisitor<out TResult>
{
    TResult Visit<TExpression>(TExpression expression) where TExpression : Expression;
}

public class Binary : Expression 
{
    public Expression Left { get; set; }
    public Expression Right { get; set; }
    public Token Operator { get; set; }

    public Binary(Expression Left, Expression Right, Token Operator)
    {
        this.Left = Left;
        this.Right = Right;
        this.Operator = Operator;
    }

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor)
    {
        return visitor.Visit<Binary>(this);
    }
}

public class Grouping : Expression 
{
    public Expression Expression { get; set; }

    public Grouping(Expression Expression)
    {
        this.Expression = Expression;
    }

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor)
    {
        return visitor.Visit<Grouping>(this);
    }
}

public class Literal : Expression 
{
    public object Value { get; set; }

    public Literal(object Value)
    {
        this.Value = Value;
    }

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor)
    {
        return visitor.Visit<Literal>(this);
    }
}

public class Unary : Expression 
{
    public Expression Expression { get; set; }
    public Token Operator { get; set; }

    public Unary(Expression Expression, Token Operator)
    {
        this.Expression = Expression;
        this.Operator = Operator;
    }

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor)
    {
        return visitor.Visit<Unary>(this);
    }
}

