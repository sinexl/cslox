// Generated by cslox/Ast/generate.py at 29.07.2025 22:20 GMT+3
// This file should not be edited manually. 

using System;
namespace cslox.Ast.Generated;

public abstract class Expression 
{
    public abstract TResult Accept<TResult>(IExpressionVisitor<TResult> visitor);
}

public interface IExpressionVisitor<out TResult>
{
    TResult Visit<TExpression>(TExpression expression) where TExpression : Expression;
}

public class Binary(Expression left, Expression right, Token @operator) : Expression 
{
    public Expression Left { get; set; } = left;
    public Expression Right { get; set; } = right;
    public Token Operator { get; set; } = @operator;

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit<Binary>(this);

    public void Deconstruct(out Expression left, out Expression right, out Token @operator) =>
        (left, right, @operator) = (Left, Right, Operator);
}

public class Grouping(Expression expression) : Expression 
{
    public Expression Expression { get; set; } = expression;

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit<Grouping>(this);

    public void Deconstruct(out Expression expression) =>
        (expression) = (Expression);
}

public class Literal(object? value) : Expression 
{
    public object? Value { get; set; } = value;

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit<Literal>(this);

    public void Deconstruct(out object? value) =>
        (value) = (Value);
}

public class Unary(Expression expression, Token @operator) : Expression 
{
    public Expression Expression { get; set; } = expression;
    public Token Operator { get; set; } = @operator;

    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit<Unary>(this);

    public void Deconstruct(out Expression expression, out Token @operator) =>
        (expression, @operator) = (Expression, Operator);
}

