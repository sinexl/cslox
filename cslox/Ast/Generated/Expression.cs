// Generated by cslox/Ast/generate.py at 07.08.2025 17:32 GMT+3
// This file should not be edited manually. 
#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

using System.Text;
namespace cslox.Ast.Generated;


public interface IExpressionVisitor<out TResult>
{
    TResult Visit<TExpression>(TExpression expression) where TExpression : Expression;
}

public abstract class Expression 
{
    public abstract TResult Accept<TResult>(IExpressionVisitor<TResult> visitor);
    public abstract string TreePrint(int indent);
    // Needed so implementers of Visitor can statically assert whether they handle all possible inheritors.
    // For static_assert in C#, see https://www.lunesu.com/archives/62-Static-assert-in-C!.html
    public const int InheritorsAmount = 16;
    public SourceLocation Location { get; set; } = new();
}

public class Grouping(Expression expression) : Expression
{
    public Expression Expression { get; set; } = expression;
    public new void Deconstruct(out Expression expression) =>
        (expression) = (Expression);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Grouping");
        sb.Append('\n');
        sb.Append(Expression.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Literal(object? value) : Expression
{
    public object? Value { get; set; } = value;
    public new void Deconstruct(out object? value) =>
        (value) = (Value);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Literal");
        sb.Append($" ({Value})");
        sb.Append('\n');
        return sb.ToString();
    }
}

public class Unary(Expression expression, Token @operator) : Expression
{
    public Expression Expression { get; set; } = expression;
    public Token Operator { get; set; } = @operator;
    public new void Deconstruct(out Expression expression, out Token @operator) =>
        (expression, @operator) = (Expression, Operator);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Unary");
        sb.Append($" ({Operator})");
        sb.Append('\n');
        sb.Append(Expression.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Sequence(Expression[] expressions) : Expression
{
    public Expression[] Expressions { get; set; } = expressions;
    public new void Deconstruct(out Expression[] expressions) =>
        (expressions) = (Expressions);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Sequence");
        sb.Append('\n');
        sb.Append(Expressions.ArrayTreePrint(indent + 1));
        return sb.ToString();
    }
}

public abstract class Binary(Expression left, Expression right) : Expression
{
    public Expression Left { get; set; } = left;
    public Expression Right { get; set; } = right;
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

}

public class Addition(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Addition");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Subtraction(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Subtraction");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Multiplication(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Multiplication");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Division(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Division");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Equality(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Equality");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Inequality(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Inequality");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Greater(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Greater");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class GreaterEqual(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("GreaterEqual");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class Less(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("Less");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

public class LessEqual(Expression left, Expression right) : Binary(left, right)
{
    public new void Deconstruct(out Expression left, out Expression right) =>
        (left, right) = (Left, Right);
    public override TResult Accept<TResult>(IExpressionVisitor<TResult> visitor) =>
        visitor.Visit(this);

    public override string ToString() => TreePrint(indent: 0);
    public override string TreePrint(int indent)
    {
        var sb = new StringBuilder();
        sb.Append(new string(' ', indent * 2)).Append("LessEqual");
        sb.Append('\n');
        sb.Append(Left.TreePrint(indent + 1));
        sb.Append(Right.TreePrint(indent + 1));
        return sb.ToString();
    }
}

